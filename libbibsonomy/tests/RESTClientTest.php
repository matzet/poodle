<?php

require_once 'config.php';
require_once '../RestClient.php';
require_once '../BasicAuthAccessor.php';



/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-07-18 at 12:51:05.
 */
class RESTClientTest extends PHPUnit_Framework_TestCase {

    /**
     * @var RESTClient
     */
    protected $restClientBasicAuth;

    
    /**
     * @var RESTClient
     */
    protected $restClientOAauth;
    
    /**
     *
     * @var BasicAuthAccessor $accessor
     */
    protected $accessorBasicAuth;
    
    /**
     *
     * @var OAuthAccessor $accessorOAuth 
     */
    protected $accessorOAuth;
    
    
    /**
     * @see initVars()
     * @var stdClass 
     */
    protected $concept;
    
    /**
     * Initializes <code>$this->concepts</code> object structure as a stdClass so
     * <code>json_encode</code> creates JSON object which is expected by the API.
     * 
     */
    private function initVars() {
        
        
        $this->concept = new stdClass();
     
        $tag = new stdClass();

        $tag->name = "test_tag";
        $tag->globalcount = 0;
        $tag->usercount = 0;
        
        $tag->subTags = array(
            new stdClass()
        );
        
        $subtag1 = new stdClass();
        $subtag2 = new stdClass();
        
        $subtag1->name = "test_subtag1";
        $subtag1->globalcount = 0;
        $subtag1->usercount = 0;
        
        
        $subtag2->name = "test_subtag2";
        $subtag2->globalcount = 0;
        $subtag2->usercount = 0;
        
        $tag->subTags[0]->tag = array(
            $subtag1,
            $subtag2
                
        );
        //$tag->subTags[] = $subtag2;
        
        $this->concept->tag = $tag;
    }
    
    
    
    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        global $host, $user, $apiKey;
        $this->initVars();
        
        $this->accessorBasicAuth = new BasicAuthAccessor($user, $apiKey);
        $this->restClientBasicAuth = new RESTClient($this->accessorBasicAuth, $host, $user);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers RESTClient::createConcept
     * @todo   Implement testCreateConcept().
     */
    public function testCreateConcept() {
        global $user;
        
        $responseBody = $this->restClientBasicAuth->createConcept($this->concept, $this->concept->tag->name, Grouping::USER, $user);
        
        $this->assertEquals("ok", $responseBody->stat);
        $this->assertEquals($this->concept->tag->name, $responseBody->resourceHash);
    }

    /**
     * @depends testCreateConcept
     */
    public function testDeleteConcept() {
       global $user;
       $responseBody = $this->restClientBasicAuth->deleteConcept("test_tag", Grouping::USER, $user);
       $this->assertEquals("ok", $responseBody->stat);
    }

    /**
     * @todo implement
     */
    public function testGetDocument() {
        
        global $user; 
        global $documentFileName;
        global $documentPostIntrahash;
        
        
        
        //echo "$user, $documentFileName, $documentPostIntrahash";
        
        //$this->restClientBasicAauth->getDocument($user, $documentPostIntrahash, $documentFileName);
        
    }

    /**
     * @covers RESTClient::createDocument
     * @todo   Implement testCreateDocument().
     */
    public function testCreateDocument() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers RESTClient::deleteDocument
     * @todo   Implement testDeleteDocument().
     */
    public function testDeleteDocument() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers RESTClient::createGroup
     * @todo   Implement testCreateGroup().
     */
    public function testCreateGroup() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers RESTClient::createUser
     * @todo   Implement testCreateUser().
     */
    public function testCreateUser() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * 
     */
    public function testCreateUserRelationship() {
        
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers RESTClient::getAuthenticatedUser
     * @todo   Implement testGetAuthenticatedUser().
     */
    public function testGetAuthenticatedUser() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers RESTClient::deleteGroup
     * @todo   Implement testDeleteGroup().
     */
    public function testDeleteGroup() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers RESTClient::deleteUser
     * @todo   Implement testDeleteUser().
     */
    public function testDeleteUser() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers RESTClient::deleteUserFromGroup
     * @todo   Implement testDeleteUserFromGroup().
     */
    public function testDeleteUserFromGroup() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers RESTClient::deleteUserRelationship
     * @todo   Implement testDeleteUserRelationship().
     */
    public function testDeleteUserRelationship() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers RESTClient::getConceptDetails
     * @todo   Implement testGetConceptDetails().
     */
    public function testGetConceptDetails() {
        
        $query = new GetConceptDetailsQuery();
        
        
    }

    /**
     * @depends testCreateConcept
     */
    public function testGetConcepts() {
        $this->restClientBasicAuth->getConcepts("publication", $grouping, $groupingName, $regex, $tags, $status, $start, $end);
    }

    /**
     * @covers RESTClient::getGroupDetails
     * @todo   Implement testGetGroupDetails().
     */
    public function testGetGroupDetails() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers RESTClient::getGroups
     * @todo   Implement testGetGroups().
     */
    public function testGetGroups() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @depends testCreateConcept
     */
    public function testGetTagDetails() {
        
        $this->restClientBasicAuth->getTagDetails('test_tag');
    }

    /**
     * @covers RESTClient::getTags
     * @todo   Implement testGetTags().
     */
    public function testGetTags() {
        global $user;
        
        //test for bookmarks
        $tags = $this->restClientBasicAuth->getTags("bookmark", Grouping::USER, $user, null, null, null, null, null, null, null, null);
        $this->assertTrue($tags->stat === "ok");
        
        //test for publications
        $tags = $this->restClientBasicAuth->getTags("publication", Grouping::USER, $user, null, null, null, null, null, null, null, null);
        $this->assertTrue($tags->stat === "ok");
    }

    /**
     * @covers RESTClient::getRelatedTags
     * @todo   Implement testGetRelatedTags().
     */
    public function testGetRelatedTags() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers RESTClient::getUserDetails
     * @todo   Implement testGetUserDetails().
     */
    public function testGetUserDetails() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers RESTClient::getUserRelationship
     * @todo   Implement testGetUserRelationship().
     */
    public function testGetUserRelationship() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers RESTClient::getUsers
     * @todo   Implement testGetUsers().
     */
    public function testGetUsers() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers RESTClient::updateConcept
     * @todo   Implement testUpdateConcept().
     */
    public function testUpdateConcept() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers RESTClient::updateGroup
     * @todo   Implement testUpdateGroup().
     */
    public function testUpdateGroup() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers RESTClient::updateTags
     * @todo   Implement testUpdateTags().
     */
    public function testUpdateTags() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers RESTClient::updateUser
     * @todo   Implement testUpdateUser().
     */
    public function testUpdateUser() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers RESTClient::createPosts
     * @todo   Implement testCreatePosts().
     */
    public function testCreatePosts() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * 
     */
    public function testGetPostDetails() {
        global $user, $documentPostIntrahash, $documentFileName;

        $res = $this->restClientBasicAuth->getPostDetails($user, $documentPostIntrahash);
        $this->assertEquals($documentFileName, $res->post->documents->document[0]->filename);
        
        $this->assertEquals($user, $res->post->user->name);
        
    }

    /**
     * @covers RESTClient::deletePosts
     * @todo   Implement testDeletePosts().
     */
    public function testDeletePosts() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers RESTClient::getPostStatistics
     * @todo   Implement testGetPostStatistics().
     */
    public function testGetPostStatistics() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers RESTClient::getPosts
     * @todo   Implement testGetPosts().
     */
    public function testGetPosts() {
        global $user, $resourceIntraHashPublication;
        
        $obj = $this->restClientBasicAuth->getPosts("publication", Grouping::USER, $user, null, $resourceIntraHashPublication, null, null, null, null, null);
        
        $this->assertTrue($obj->posts->post[0]->bibtex->intrahash == $resourceIntraHashPublication);
    }

    /**
     * @covers RESTClient::updatePosts
     * @todo   Implement testUpdatePosts().
     */
    public function testUpdatePosts() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

}
