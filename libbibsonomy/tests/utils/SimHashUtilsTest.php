<?php

require_once '../../utils/SimHashUtils.php';
require_once '../../SimpleRecord.php';

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-07-18 at 12:51:09.
 */
class SimHashUtilsTest extends PHPUnit_Framework_TestCase {

    /**
     * @var SimHashUtils
     */
    protected $record;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new SimHashUtils;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }


    /**
     * @covers SimHashUtils::getNormalizedPersons
     * @todo   Implement testGetNormalizedPersons().
     */
    public function testGetNormalizedPersons() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers SimHashUtils::getNormalizedYear
     * @todo   Implement testGetNormalizedYear().
     */
    public function testGetNormalizedYear() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }



    /**
     * @covers SimHashUtils::normalizePerson
     * @todo   Implement testNormalizePerson().
     */
    public function testNormalizePerson() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers SimHashUtils::serializePersonNames
     * @todo   Implement testSerializePersonNames().
     */
    public function testSerializePersonNames() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers SimHashUtils::serializePersonName
     * @todo   Implement testSerializePersonName().
     */
    public function testSerializePersonName() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers SimHashUtils::getFirstPersonsLastName
     * @todo   Implement testGetFirstPersonsLastName().
     */
    public function testGetFirstPersonsLastName() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    
    
    public function testGetNormalizedTitle() {
        $actual = SimHashUtils::getNormalizedTitle("Konzept und Umsetzung eines Tag-Recommenders für Video-Ressourcen am Beispiel UniVideo");
        
        $expected = utf8_decode("konzeptundumsetzungeinestagrecommendersfürvideoressourcenambeispielunivideo");
                
        $this->assertEquals($expected, $actual);
    }
    
    public function testNormalizePersonList() {
        
        $persons = array(
            new Person("A"),
            new Person("B"),
            new Person("C")
        );
        
        $normalizedPersons = SimHashUtils::normalizePersonList($persons);
        //error_log(print_r($normalizedPersons, true));
        $this->assertTrue($normalizedPersons[0] == "a");
        $this->assertTrue($normalizedPersons[1] == "b");
        $this->assertTrue($normalizedPersons[2] == "c");
        
        $this->assertEquals("[a,b,c]", StringUtils::getStringFromList($normalizedPersons));
        
        $persons = array(
            new Person("Bertrand Arthur William", "Russell"),
            new Person("Donald E.", "Knuth"),
            new Person("Tim", "Berners-Lee"),
            new Person("Thomas", "Vander Wal")
            
        );
        $normalizedPersons = SimHashUtils::normalizePersonList($persons);
        $this->assertEquals("[b.russell,d.knuth,t.bernerslee,t.wal]", StringUtils::getStringFromList($normalizedPersons));
    }
    
    public function testGetSimHash1() {
        
        $person = new Person("Sebastian", "Böttger");
        
        $record = new SimpleRecord(
                "Konzept und Umsetzung eines Tag-Recommenders für Video-Ressourcen am Beispiel UniVideo",
                "2012",
                array($person),
                array()
        );
        
        //hash calculated from BibSonomy
        $bibsonomyHash = "8fd8ce9278d61f8bd5292d7aeab9aacd";
        
        //calculate hash
        $calculatedHash = SimHashUtils::getSimHash1($record);
        
        //compare both hashes
        $this->assertEquals($bibsonomyHash, $calculatedHash);
        
        /*
         * okay, let's try with another more complex example
         */
        $persons = array(
            new Person("G.", "Salton"),
            new Person("M.", "McGill")
        );
        
        $record = new SimpleRecord(
                "Introduction to Modern Information Retrieval", 
                "1983",
                $persons,
                array()
        );
        
        //hash calculated from BibSonomy
        $bibsonomyHash = "90e5e9500c919499099da9517aa8163e";
        
        //calculate hash
        $calculatedHash = SimHashUtils::getSimHash1($record);
        
        //compare both hashes
        $this->assertEquals($bibsonomyHash, $calculatedHash);
    }
    
}
